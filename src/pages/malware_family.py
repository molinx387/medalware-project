import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import hydralit as hy
from hydralit import HydraHeadApp
from malware_definitions import malware_definitions


class familia_malware(HydraHeadApp):
    def run(self):
        data = pd.read_csv("src/data/malwares.csv")
        titel_familia = st.container()
        with titel_familia:
            st.title("PAGINA POR FAMILIA")
            options = data["Familia"].unique()
            familia_selected = st.selectbox("Seleccionar Familia de Malware", options)
            num_familias = len(options)
            st.write(f"Número de familias disponibles: {num_familias}")
            st.header(
                f"Información sobre la familia de malware seleccionada: {familia_selected}"
            )

            # Obtener la definición y el tipo de la familia de malware seleccionada
            definicion = next(
                (
                    item["definicion"]
                    for item in malware_definitions
                    if item["familia"] == familia_selected
                ),
                None,
            )
            tipo = next(
                (
                    item["tipo"]
                    for item in malware_definitions
                    if item["familia"] == familia_selected
                ),
                None,
            )

            if definicion:
                st.subheader("Definición del Malware")
                st.write(definicion)

            if tipo:
                st.subheader("Tipo del Malware")
                st.write(tipo)
            # Filtrar los datos por la familia de malware seleccionada
            selected_data = data[data["Familia"] == familia_selected]

            # Mostrar la tabla con los datos filtrados
            st.subheader("Tabla de Malwares")
            col1, col2, col3 = st.columns([0.1, 4, 0.1])
            col2.write(
                selected_data[
                    [
                        "SHA256",
                        "Familia",
                        "Extension",
                        "Peso (MB)",
                        "Metodo de Entrega",
                        "Origen",
                        "Dia",
                        "Hora",
                    ]
                ]
            )

            # Contar la cantidad de filas para cada método de entrega
            data_grouped_metodo = selected_data["Metodo de Entrega"].value_counts()

            # Crear el gráfico de torta para método de entrega con plotly.graph_objects
            fig1 = go.Figure(
                data=[
                    go.Pie(
                        labels=data_grouped_metodo.index,
                        values=data_grouped_metodo.values,
                    )
                ]
            )
            # Personalizar Colores de las gráficas de torta
            colors = px.colors.qualitative.G10
            # Personalizar el diseño del gráfico de torta para método de entrega
            fig1.update_traces(
                textposition="inside",
                textinfo="percent+label",
                textfont_size=12,
                marker=dict(colors=colors, line=dict(color=colors, width=2)),
            )

            fig1.update_layout(
                title="Método de Entrega",
                width=400,
                height=400,
                margin=dict(l=10, r=10, t=30, b=10),
            )

            # Contar la cantidad de filas para cada extensión
            data_grouped_extension = selected_data["Extension"].value_counts()

            # Crear el gráfico de torta para extensión con plotly.graph_objects
            fig2 = go.Figure(
                data=[
                    go.Pie(
                        labels=data_grouped_extension.index,
                        values=data_grouped_extension.values,
                    )
                ]
            )

            # Personalizar el diseño del gráfico de torta para extensión
            fig2.update_traces(
                textposition="inside",
                textinfo="percent+label",
                textfont_size=12,
                marker=dict(colors=colors, line=dict(color=colors, width=2)),
            )

            fig2.update_layout(
                title="Extensión",
                width=400,
                height=400,
                margin=dict(l=10, r=10, t=30, b=10),
            )

            # Crear la primera columna con los dos gráficos de torta
            col1, col2 = st.columns([3, 2])
            with col1:
                st.plotly_chart(fig1)
                st.plotly_chart(fig2)

            # Contar la cantidad de filas para cada método de origen
            data_grouped_metodo = selected_data["Origen"].value_counts()

            # Crear el gráfico de torta para método de entrega con plotly.graph_objects
            fig3 = go.Figure(
                data=[
                    go.Pie(
                        labels=data_grouped_metodo.index,
                        values=data_grouped_metodo.values,
                    )
                ]
            )

            # Personalizar el diseño del gráfico de torta para método de entrega
            fig3.update_traces(
                textposition="inside",
                textinfo="percent+label",
                textfont_size=12,
                marker=dict(colors=colors, line=dict(color=colors, width=2)),
            )

            fig3.update_layout(
                title="Origen",
                width=400,
                height=400,
                margin=dict(l=10, r=10, t=30, b=10),
            )

            selected_data["Dia"] = pd.to_datetime(selected_data["Dia"])
            # Contar la cantidad de filas para cada día
            data_grouped_extension = (
                selected_data.groupby(selected_data["Dia"].dt.date)
                .size()
                .reset_index(name="cantidad")
            )

            # Crear el gráfico de área con Plotly Express
            fig4 = px.area(data_grouped_extension, x="Dia", y="cantidad")

            # Personalizar el diseño del gráfico de área
            fig4.update_layout(
                title="Cantidad de Malware por Día",
                xaxis_title="Fecha",
                yaxis_title="Cantidad de Malware",
            )

            # Crear la segunda columna con los dos gráficos de torta
            with col2:
                st.plotly_chart(fig3)
                st.plotly_chart(fig4)
