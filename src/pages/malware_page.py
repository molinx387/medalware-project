import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import hydralit as hy
from hydralit import HydraHeadApp
from definition.malware_definitions import malware_dict

class type_malware(HydraHeadApp):
    def run(self):
        data = pd.read_csv("src/data/malwares.csv")
        titel_general = st.container() 
        st.divider() 
        information = st.container()
        definicion_malware = st.container()


        with titel_general:
            col1, col2 = st.columns([3, 7])
            col1.title("👾ANÁLISIS DE TIPOS DE MALWARE")
            col1.subheader(
                "📍En este apartado se encuentra informacion individual sobre cada tipo de malware"
            )
            options = data["Malware"].unique()
            malware_selected = col1.selectbox("👇Selecciona tipo de Malware👇", options)
            num_malware = len(options)
            # Obtener la definición y el tipo de la familia de malware seleccionada
            selected_data = data[data["Malware"] == malware_selected]           
            selected_data["Fecha"] = pd.to_datetime(selected_data["Fecha"])
            # Contar la cantidad de filas para cada día
        data_grouped_extension = (
        selected_data.groupby(selected_data["Fecha"].dt.date)
        .size()
        .reset_index(name="cantidad")
        )

            # Crear el gráfico de área con Plotly Express
        fig4 = px.histogram(data_grouped_extension, x="Fecha", y="cantidad",nbins=50)

            # Personalizar el diseño del gráfico de área
        fig4.update_layout(
            title=f"Registros del malware {malware_selected}",
            title_x=0.5,
            xaxis_title="Fecha",
            yaxis_title=" Numero de Ocurrencias",
        )

        histograma_malware = col2.container()

        with histograma_malware:
            col1, col2, col3 = st.columns([0.1, 4, 0.1])
            col2.plotly_chart(
                fig4,
                config={"displaylogo": False},
                use_container_width=True,
                width=800,
                height=400,
                )
        definicion = next(
                    (
                        item["Definicion"]
                        for item in malware_dict
                        if item["Malware"] == malware_selected
                    ),
                    None,
                )
        familia = next(
                    (
                    item["Familia"]
                    for item in malware_dict
                    if item["Malware"] == malware_selected
                    ),
                    None,
                )
        sistema_op = next(
                    (
                        item["SO"]
                        for item in malware_dict
                        if item["Malware"] == malware_selected
                    ),
                    None,
                )

        with definicion_malware:
            col1,col2 = st.columns([4,6])
            col1.title(f"🪬 {malware_selected.upper()}")
            if definicion:
                col1.markdown(f"""
                _📖def:_
                <div style="text-align: justify">
                <h4>{definicion}
                """,unsafe_allow_html=True,
                )
            col1.markdown(f"""
                <div style="text-align: justify">
                <h4>🔰Medalware a recopliado datos de {selected_data.shape[0]}
                archivos correspondientes a este tipo de malware 

            """,unsafe_allow_html=True,
            )
            if familia:
                col1.markdown(f"""
                <div style="text-align: justify">
                <h4> 🔰 Las caracteristicas de este malware le hacen pertenecer a la familia {familia}
                """,unsafe_allow_html=True,
                )

            if sistema_op:        
                col1.markdown(f"""
                <div style="text-align: justify">
                <h4> 🔰Este tipo de malware afecta principalmente a {sistema_op.title()}
                """,unsafe_allow_html=True,
                )
            col1.markdown(f"""
                <div style="text-align: justify">
                <h4> 🔰 {malware_selected.title()} es un malware que se encuentra mayormente oculto 
                archivos de extension .{selected_data["Extension"].value_counts().idxmax()}
                """,unsafe_allow_html=True,
                )
            col1.markdown(f"""
                <div style="text-align: justify">
                <h4> 🔰 El peso promedio de un archivo {malware_selected.title()} 
                es de {selected_data["Peso"].mean().round(2)} KB
                """,unsafe_allow_html=True,
                )
            col1.markdown(f"""
                <div style="text-align: justify">
                <h4> 🔰 Este tipo de malware infecta llega a los sistemas a traves de
                {selected_data["Metodo de Entrega"].value_counts().idxmax()}
                """,unsafe_allow_html=True)
            col1.markdown(f"""
                <div style="text-align: justify">
                <h4> 🔰 Los datos recopilados de este malware indican que a afectado mayormente a 
                {selected_data["Origen"].value_counts().idxmax()} (ISO 3166-1) alpha-3
                """,unsafe_allow_html=True)
            
        data_grouped_origen = data["Malware"].value_counts()
        total_datos = data_grouped_origen.sum()
        porcentajes = selected_data["Malware"].value_counts() / total_datos * 100
        st.markdown(porcentajes.iloc[0].round(2))