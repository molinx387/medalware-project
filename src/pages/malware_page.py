import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import hydralit as hy
from hydralit import HydraHeadApp
from definition.malware_definitions import malware_dict

class type_malware(HydraHeadApp):
    def run(self):
        data = pd.read_csv("src/data/malwares.csv")
        titel_general = st.container()
        with titel_general:
            col1, col2 = st.columns([3, 7])
            col1.title("👾ANÁLISIS DE TIPOS DE MALWARE")
            col1.subheader(
                "📍En este apartado se encuentran análisis de los datos individuales de cada tipo de malware recopilado por Medalware"
            )
            options = data["Malware"].unique()
            malware_selected = col1.selectbox("Seleccionar tipo de Malware", options)
            num_malware = len(options)
            st.write(f"Número de Malwares recolectados por Medalware: {num_malware}")
            st.header(f"Información sobre el malware seleccionado: {malware_selected}")
            # Obtener la definición y el tipo de la familia de malware seleccionada
            selected_data = data[data["Malware"] == malware_selected]           
            selected_data["Fecha"] = pd.to_datetime(selected_data["Fecha"])
            # Contar la cantidad de filas para cada día
        data_grouped_extension = (
        selected_data.groupby(selected_data["Fecha"].dt.date)
        .size()
        .reset_index(name="cantidad")
        )

            # Crear el gráfico de área con Plotly Express
        fig4 = px.area(data_grouped_extension, x="Fecha", y="cantidad")

            # Personalizar el diseño del gráfico de área
        fig4.update_layout(
            title="Cantidad de Malware por Día",
            xaxis_title="Fecha",
            yaxis_title="Cantidad de Malware",
        )
        histograma_malware = col2.container()
        with histograma_malware:
            col1, col2, col3 = st.columns([0.1, 4, 0.1])
            col2.plotly_chart(
                fig4,
                config={"displaylogo": False},
                use_container_width=True,
                width=800,
                height=400,
                )
        st.divider() 
        definicion = next(
            (
                item["Definicion"]
                for item in malware_dict
                if item["Malware"] == malware_selected
            ),
            None,
        )
        familia = next(
            (
               item["Familia"]
               for item in malware_dict
               if item["Malware"] == malware_selected
            ),
            None,
        )
        sistema_op = next(
            (
                item["SO"]
                for item in malware_dict
                if item["Malware"] == malware_selected
            ),
            None,
        )
        if definicion:
            st.subheader("Definición del Malware")
            st.write(definicion)

        if familia:
            st.subheader("Familia")
            st.write(familia)

         if sistema_op:
            st.subheader("SO")
            st.write(sistema_op)

            # Filtrar los datos por la familia de malware seleccionada
            # selected_data = data[data["Malware"] == malware_selected]

            # Mostrar la tabla con los datos filtrados
        st.subheader("Tabla de Malwares")
        col1, col2, col3 = st.columns([0.1, 4, 0.1])
        col2.write(
            selected_data[
                [
                    "Fecha",
                    "SHA256",
                    "Malware",
                    "Familia",
                    "SO",
                    "Metodo de Entrega",
                    "Extension",
                    "Peso",
                    "Origen",
                ]
            ]
        )

            # Contar la cantidad de filas para cada método de entrega
        data_grouped_metodo = selected_data["Metodo de Entrega"].value_counts()

            # Crear el gráfico de torta para método de entrega con plotly.graph_objects
            fig1 = go.Figure(
                data=[
                    go.Pie(
                        labels=data_grouped_metodo.index,
                        values=data_grouped_metodo.values,
                    )
                ]
            )
            # Personalizar Colores de las gráficas de torta
            colors = px.colors.qualitative.G10
            # Personalizar el diseño del gráfico de torta para método de entrega
            fig1.update_traces(
                textposition="inside",
                textinfo="percent+label",
                textfont_size=12,
                marker=dict(colors=colors, line=dict(color=colors, width=2)),
            )

            fig1.update_layout(
                title="Método de Entrega",
                width=400,
                height=400,
                margin=dict(l=10, r=10, t=30, b=10),
            )

            # Contar la cantidad de filas para cada extensión
            data_grouped_extension = selected_data["Extension"].value_counts()

            # Crear el gráfico de torta para extensión con plotly.graph_objects
            fig2 = go.Figure(
                data=[
                    go.Pie(
                        labels=data_grouped_extension.index,
                        values=data_grouped_extension.values,
                    )
                ]
            )

            # Personalizar el diseño del gráfico de torta para extensión
            fig2.update_traces(
                textposition="inside",
                textinfo="percent+label",
                textfont_size=12,
                marker=dict(colors=colors, line=dict(color=colors, width=2)),
            )

            fig2.update_layout(
                title="Extensión",
                width=400,
                height=400,
                margin=dict(l=10, r=10, t=30, b=10),
            )

            # Crear la primera columna con los dos gráficos de torta
            col1, col2 = st.columns([3, 2])
            with col1:
                st.plotly_chart(fig1)
                st.plotly_chart(fig2)

            # Contar la cantidad de filas para cada método de origen
            data_grouped_metodo = selected_data["Origen"].value_counts()

            # Crear el gráfico de torta para método de entrega con plotly.graph_objects
            fig3 = go.Figure(
                data=[
                    go.Pie(
                        labels=data_grouped_metodo.index,
                        values=data_grouped_metodo.values,
                    )
                ]
            )

            # Personalizar el diseño del gráfico de torta para método de entrega
            fig3.update_traces(
                textposition="inside",
                textinfo="percent+label",
                textfont_size=12,
                marker=dict(colors=colors, line=dict(color=colors, width=2)),
            )

            fig3.update_layout(
                title="Origen",
                width=400,
                height=400,
                margin=dict(l=10, r=10, t=30, b=10),
            )

            selected_data["Fecha"] = pd.to_datetime(selected_data["Fecha"])
            # Contar la cantidad de filas para cada día
            data_grouped_extension = (
                selected_data.groupby(selected_data["Fecha"].dt.date)
                .size()
                .reset_index(name="cantidad")
            )

            # Crear el gráfico de área con Plotly Express
            fig4 = px.area(data_grouped_extension, x="Fecha", y="cantidad")

            # Personalizar el diseño del gráfico de área
            fig4.update_layout(
                title="Cantidad de Malware por Día",
                xaxis_title="Fecha",
                yaxis_title="Cantidad de Malware",
            )

            # Crear la segunda columna con los dos gráficos de torta
            with col2:
                st.plotly_chart(fig3)
                st.plotly_chart(fig4)
