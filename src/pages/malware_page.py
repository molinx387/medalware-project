import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import hydralit as hy
from hydralit import HydraHeadApp
from definition.malware_definitions import malware_dict

class type_malware(HydraHeadApp):
    def run(self):
        data = pd.read_csv("src/data/malwares.csv")
        titel_general = st.container() 
        st.divider()

        # Contar la cantidad de filas para cada origen del mapa

        tag_selector = st.container()
        with titel_general:
            col1, col2 = st.columns([3, 7])
            col1.title("👾ANÁLISIS DE TIPOS DE MALWARE")
            col1.subheader(
                "📍En este apartado se encuentra informacion individual sobre cada tipo de malware"
            )
            options = data["Malware"].unique()
            malware_selected = col1.selectbox("👇Selecciona tipo de Malware👇", options)
            num_malware = len(options)
            # Obtener la definición y el tipo de la familia de malware seleccionada
            selected_data = data[data["Malware"] == malware_selected]           
            selected_data["Fecha"] = pd.to_datetime(selected_data["Fecha"])
            # Contar la cantidad de filas para cada día
        data_grouped_extension = (
        selected_data.groupby(selected_data["Fecha"].dt.date)
        .size()
        .reset_index(name="cantidad")
        )

            # Crear el gráfico de área con Plotly Express
        fig4 = px.histogram(data_grouped_extension, x="Fecha", y="cantidad",nbins=50)

            # Personalizar el diseño del gráfico de área
        fig4.update_layout(
            title=f"Registros del malware {malware_selected}",
            title_x=0.5,
            xaxis_title="Fecha",
            yaxis_title=" Numero de Ocurrencias",
        )

        histograma_malware = col2.container()
        with histograma_malware:
            col1, col2, col3 = st.columns([0.1, 4, 0.1])
            col2.plotly_chart(
                fig4,
                config={"displaylogo": False},
                use_container_width=True,
                width=800,
                height=400,
                )
        definicion = next(
                    (
                        item["Definicion"]
                        for item in malware_dict
                        if item["Malware"] == malware_selected
                    ),
                    None,
                )
        familia = next(
                    (
                    item["Familia"]
                    for item in malware_dict
                    if item["Malware"] == malware_selected
                    ),
                    None,
                )
        sistema_op = next(
                    (
                        item["SO"]
                        for item in malware_dict
                        if item["Malware"] == malware_selected
                    ),
                    None,
                )

        data_grouped_mapa = selected_data["Origen"].value_counts()

        # Crear el DataFrame con los datos de cantidad por origen
        data_map = pd.DataFrame(
            {"iso_alpha": data_grouped_mapa.index, "cantidad": data_grouped_mapa.values}
        )

        # Crear el gráfico de mapa coroplético interactivo
        fig5 = px.choropleth(
            data_frame=data_map,
            locations="iso_alpha",
            locationmode="ISO-3",
            color="cantidad",
            color_continuous_scale="Viridis",
            labels={"cantidad": "Cantidad"},
            title="Distribución de Origen",
            projection="natural earth",
        )

        fig5.update_geos(
            showland=True,
            showocean=True,
            showcountries=True,
            showframe=True,
            landcolor="white",
            oceancolor="white",
            bgcolor="rgba(0,0,0,0)",
        )

        fig5.update_layout(width=800, height=600)

        # Mostrar el gráfico en Streamlit

        definicion_malware = st.container()
        with definicion_malware:
            # colt1, colt2, colt3 = st.columns([7,5,7])
            col1,col2,col3 = st.columns([2.5,5,2.5])
            col4,col5,col6 = st.columns([1,8,1])
            col2.markdown(f"""
                <div style="text-align: center">
                <h1>☣️{malware_selected}☣️
                <h3>📖
                """,unsafe_allow_html=True,
                )
        
        if definicion:
            col2.markdown(f"""
            <div style="text-align: center">
            <h4>{definicion}
            """,unsafe_allow_html=True,
            )          
            col2.markdown(f"""
                <div style="text-align: center">
                <h2> 📑 Analisis del Malware {malware_selected}📑
                """,unsafe_allow_html=True,
                )


        tag_selector = col5.container()
        with tag_selector:

            tab1,tab2,tab3,tab4,tab5,tab6,tab7 = col5.tabs([
            "       📈 Registros","     🪬Familia","        🖥Sistema Operativo",
            "       💾Tipo de Archivo","       📦Peso","      📬Metodo de Entrega",
            "       🌎Origen"
            ])








            data_grouped_origen = data["Malware"].value_counts()
            total_datos = data_grouped_origen.sum()
            porcentajes = selected_data["Malware"].value_counts() / total_datos * 100
            
            tab1.markdown(f"""
                <div style="text-align: justify">
                <h4>🔰Medalware a recopliado datos de {selected_data.shape[0]}
                 archivos con el malware {malware_selected} que corresponden al 
                 {porcentajes.iloc[0].round(2)} % de los malwares globales analizados
                 por la aplicacion 
            """,unsafe_allow_html=True,
            )

        tabla_malwares = tab1.container()
        with tabla_malwares:
            st.subheader(f" Registro de datos correspondientes a {malware_selected}")
            col1, col2, col3 = st.columns([0.1, 4, 0.1])
            col2.write(
                selected_data[
                    [
                        "Fecha",
                        "SHA256",
                        "Malware",
                        "Familia",
                        "SO",
                        "Metodo de Entrega",
                        "Extension",
                        "Peso",
                        "Origen",
                    ]
                ]
            )

            if familia:
                tab2.markdown(f"""
                <div style="text-align: justify">
                <h3> 🔰 Segun el análisis de Medalware,
                '{malware_selected}' pertenece a la familia de malwares conocida como
                :📍{familia}
                """,unsafe_allow_html=True,
                )

            if sistema_op:        
                tab3.markdown(f"""
                <div style="text-align: justify">
                <h4> 🔰Este tipo de malware afecta principalmente a {sistema_op.title()}
                """,unsafe_allow_html=True,
                )
            tab4.markdown(f"""
                <div style="text-align: justify">
                <h4> 🔰 {malware_selected.title()} es un malware que se encuentra mayormente oculto 
                archivos de extension .{selected_data["Extension"].value_counts().idxmax()}
                """,unsafe_allow_html=True,
                )
            tab5.markdown(f"""
                <div style="text-align: justify">
                <h4> 🔰 El peso promedio de un archivo {malware_selected.title()} 
                es de {selected_data["Peso"].mean().round(2)} KB
                """,unsafe_allow_html=True,
                )
            tab6.markdown(f"""
                <div style="text-align: justify">
                <h4> 🔰 Este tipo de malware infecta llega a los sistemas a traves de
                {selected_data["Metodo de Entrega"].value_counts().idxmax()}
                """,unsafe_allow_html=True)
            tab7.markdown(f"""
                <div style="text-align: justify">
                <h4> 🔰 Los datos recopilados de este malware indican que a afectado mayormente al pais 
                {selected_data["Origen"].value_counts().idxmax()} (ISO 3166-1, alpha-3)
                """,unsafe_allow_html=True)



        mapa_malwares = tab7.container()
        with mapa_malwares:
            col1, col2, col3 = st.columns([3, 7, 3])
            col2.subheader("📌ESPECTRO GLOBAL DE DATOS DE MEDALWARE📌")
            col2.plotly_chart(
                fig5, config={"displaylogo": False}, use_container_width=True
            )    

        # Obtener la familia del malware seleccionado
        familia_seleccionada = selected_data["Familia"].iloc[0]

        # Filtrar los datos para incluir solo los malwares de la misma familia
        malwares_misma_familia = data[data["Familia"] == familia_seleccionada]

        # Agrupar los malwares por nombre y contar la cantidad de ocurrencias de cada uno
        datos_agrupados = malwares_misma_familia["Malware"].value_counts().reset_index()
        datos_agrupados.columns = ["Malware", "Cantidad"]

        # Calcular la cantidad total de malwares de la misma familia
        total_malwares_familia = datos_agrupados["Cantidad"].sum()

        # Calcular el porcentaje del malware seleccionado en comparación con otros de la misma familia
        porcentaje_seleccionado = (selected_data.shape[0] / total_malwares_familia) * 100

        # Mostrar el porcentaje en Streamlit
        tab2.markdown(f"""
                <div style="text-align: justify">
                <h4>Este tipo de malware 
                abarca un: {porcentaje_seleccionado:.2f}%
                de los registros de toda la  familia de {familia}""",unsafe_allow_html=True)
        # Crear la gráfica de dispersión
        fig = px.bar(datos_agrupados, x="Malware",
                     y="Cantidad",
                     title="Gráfica de los malware pertencientes a la familia Botnet")
        # Personalizar el diseño de la gráfica
        fig.update_layout(xaxis_title="Malware", yaxis_title="Cantidad", title_x=0.25)

        # Mostrar la gráfica en Streamlit
        tab2.plotly_chart(fig, config={"displayModeBar": False})



